//go:generate packer-sdc mapstructure-to-hcl2 -type Config
package classic

import (
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/packer-plugin-sdk/common"
	"github.com/hashicorp/packer-plugin-sdk/communicator"
	"github.com/hashicorp/packer-plugin-sdk/packer"
	"github.com/hashicorp/packer-plugin-sdk/template/config"
	"github.com/hashicorp/packer-plugin-sdk/template/interpolate"
)

type Config struct {
	common.PackerConfig `mapstructure:",squash"`
	Comm                communicator.Config `mapstructure:",squash"`

	Username            string   `mapstructure:"username"`
	APIKey              string   `mapstructure:"api_key"`
	ImageName           string   `mapstructure:"image_name"`
	ImageDescription    string   `mapstructure:"image_description"`
	ImageType           string   `mapstructure:"image_type"`
	BaseImageId         string   `mapstructure:"base_image_id"`
	BaseOsCode          string   `mapstructure:"base_os_code"`
	UploadToDatacenters []string `mapstructure:"upload_to_datacenters"`

	InstanceName                   string  `mapstructure:"instance_name"`
	InstanceDomain                 string  `mapstructure:"instance_domain"`
	InstanceFlavor                 string  `mapstructure:"instance_flavor"`
	InstanceLocalDiskFlag          bool    `mapstructure:"instance_local_disk_flag"`
	InstanceCpu                    int     `mapstructure:"instance_cpu"`
	InstanceMemory                 int64   `mapstructure:"instance_memory"`
	InstanceDiskCapacity           int     `mapstructure:"instance_disk_capacity"`
	DatacenterName                 string  `mapstructure:"datacenter_name"`
	PublicVlanId                   int64   `mapstructure:"public_vlan_id"`
	InstanceNetworkSpeed           int     `mapstructure:"instance_network_speed"`
	ProvisioningSshKeyId           int64   `mapstructure:"provisioning_ssh_key_id"`
	InstancePublicSecurityGroupIds []int64 `mapstructure:"public_security_groups"`

	RawStateTimeout string              `mapstructure:"instance_state_timeout"`
	StateTimeout    time.Duration       `mapstructure-to-hcl2:",skip"`
	ctx             interpolate.Context `mapstructure-to-hcl2:",skip"`
}

// Prepare processes the build configuration parameters.
func (c *Config) Prepare(raws ...interface{}) ([]string, error) {
	err := config.Decode(c, &config.DecodeOpts{
		Interpolate:        true,
		InterpolateContext: &c.ctx,
		InterpolateFilter:  &interpolate.RenderFilter{},
	}, raws...)

	if err != nil {
		return nil, err
	}

	// Check for required configurations that will display errors if not set
	var errs *packer.MultiError
	errs = packer.MultiErrorAppend(errs, c.Comm.Prepare(&c.ctx)...)

	// Assign default values if possible
	if c.DatacenterName == "" {
		c.DatacenterName = "ams01"
	}

	if c.InstanceName == "" {
		c.InstanceName = fmt.Sprintf("ibmcloud-%d", time.Now().Unix())
	}

	if c.InstanceDomain == "" {
		c.InstanceDomain = "defaultdomain.com"
	}

	if c.ImageDescription == "" {
		c.ImageDescription = "Instance image Generated by packer.io"
	}

	if c.ImageType == "" {
		c.ImageType = IMAGE_TYPE_STANDARD
	}

	if c.InstanceNetworkSpeed == 0 {
		c.InstanceNetworkSpeed = 10
	}

	if c.RawStateTimeout == "" {
		c.RawStateTimeout = "10m"
	}

	if c.Comm.Type == "winrm" {
		if c.Comm.WinRMUser == "" {
			c.Comm.WinRMUser = "Administrator"
		}
	} else if c.Comm.Type == "ssh" {
		if c.Comm.SSHUsername == "" {
			c.Comm.SSHUsername = "root"
		}
	}

	var byFlavor = true
	if c.InstanceCpu > 0 {
		byFlavor = false
	}

	if c.InstanceMemory > 0 {
		byFlavor = false
	}

	if c.InstanceDiskCapacity > 0 {
		byFlavor = false
	}

	if !byFlavor && c.InstanceFlavor != "" {
		errs = packer.MultiErrorAppend(
			errs, errors.New("[ERROR] instance_flavor must be specified without instance_cpu, instance_memory, and instance_disk_capacity"))
	} else if byFlavor && c.InstanceFlavor == "" {
		errs = packer.MultiErrorAppend(
			errs, errors.New("[ERROR] instance_flavor must be specified"))
	}

	if c.APIKey == "" {
		errs = packer.MultiErrorAppend(
			errs, errors.New("[ERROR] api_key or the SOFTLAYER_API_KEY environment variable must be specified"))
	}

	if c.Username == "" {
		errs = packer.MultiErrorAppend(
			errs, errors.New("[ERROR] username or the SOFTLAYER_USER_NAME environment variable must be specified"))
	}

	if c.ImageName == "" {
		errs = packer.MultiErrorAppend(
			errs, errors.New("[ERROR] image_name must be specified"))
	}

	if c.ImageType != IMAGE_TYPE_STANDARD {
		errs = packer.MultiErrorAppend(
			errs, fmt.Errorf("[ERROR] Unknown image_type '%s'. Must be 'standard'", c.ImageType))
	}

	if c.BaseImageId == "" && c.BaseOsCode == "" {
		errs = packer.MultiErrorAppend(
			errs, errors.New("[ERROR] Please specify base_image_id or base_os_code"))
	}

	if c.BaseImageId != "" && c.BaseOsCode != "" {
		errs = packer.MultiErrorAppend(
			errs, errors.New("[ERROR] Please specify only one of base_image_id or base_os_code"))
	}

	stateTimeout, err := time.ParseDuration(c.RawStateTimeout)
	if err != nil {
		errs = packer.MultiErrorAppend(
			errs, fmt.Errorf("[ERROR] Failed parsing state_timeout: %s", err))
	}
	c.StateTimeout = stateTimeout

	//log.Println(common.ScrubConfig(self.config, c.APIKey, c.Username))

	if errs != nil && len(errs.Errors) > 0 {
		return nil, errs
	}

	return nil, nil
}
